% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rgemini.R
\name{run_gemini}
\alias{run_gemini}
\title{Generate Content with Gemini API}
\usage{
run_gemini(
  prompt,
  model = "gemini-2.0-flash",
  media = NULL,
  json_mode = !is.null(response_schema),
  response_schema = NULL,
  temperature = 0.1,
  context = NULL,
  detailed_results = FALSE,
  make_content = TRUE,
  add_prompt = FALSE,
  verbose = FALSE,
  api_key = getOption("gemini_api_key")
)
}
\arguments{
\item{prompt}{A character string containing the text prompt to be sent to the Gemini API.}

\item{model}{A character string specifying the Gemini model to use. Defaults to `"gemini-2.0-flash"`.}

\item{media}{Either a single media object or a list of media objects to be included in the prompt. Call \code{\link{gemini_media_upload}} to upload the document or media.}

\item{json_mode}{Logical. If \code{TRUE}, expects the response in JSON format. Defaults to \code{!is.null(response_schema)}.}

\item{response_schema}{Optional structured output schema for the response. Defaults to \code{NULL}. Even if you want well structures JSON output, you may not always want to provide a response schema. I experienced several cases in which the actual output becomes worse if a schema is provided.}

\item{temperature}{A numeric value controlling the randomness of the output. Defaults to 0.1.}

\item{context}{A context object generated by \code{gemini_context}. Allows to cache long prompt prefixes or uploaded documents.}

\item{detailed_results}{Logical. If \code{TRUE}, returns detailed results of different retriveal steps. Contains also an element \code{has_error} indicating if an error occured and an \code{err_msg}. Use this if you want error handling or debugging. If \code{FALSE} just returns finally parsed content and throws an error if somewhere in the retrieval process and error occurred.}

\item{make_content}{Only relevant if \code{detailed_results=TRUE}. If set \code{FALSE} don't attempt last step to generate main content. If \code{json_mode = TRUE} the last content genaration step is a source of error with models that don't reliable generate valid json.}

\item{add_prompt}{Only relevant if \code{detailed_results=TRUE}. Then Logical. If \code{TRUE}, includes the prompt in the returned \code{res_df}. Defaults to \code{FALSE}.}

\item{verbose}{Logical. If \code{TRUE}, prints debugging and request information. Defaults to \code{FALSE}.}

\item{api_key}{A character string containing your Gemini API key. Defaults to the value obtained from \code{getOption("gemini_api_key")}.}
}
\value{
A list containing the Gemini API response. If \code{as_data_frame} is \code{TRUE}, the response is converted to a data frame.
}
\description{
Sends a text prompt (and optionally one or more media objects) to the Gemini API to generate content.
}
\details{
The function builds a JSON payload that includes the provided text prompt as well as any media objects supplied via the \code{media} parameter.
Each media object is appended to the \code{parts} of the request under the \code{file_data} key. The payload is then sent via a POST request
to the Gemini API endpoint for content generation.
}
\examples{
\dontrun{
# Example using only a text prompt:
result <- run_gemini(prompt = "Tell a joke", verbose = TRUE)

}

}
\seealso{
\code{\link[httr]{POST}}, \code{\link[jsonlite]{toJSON}}
}
